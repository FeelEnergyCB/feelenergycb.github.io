.clearfix(){
  &:before,
  &:after {
      content:"";
      display:table;
  }
  &:after {
      clear:both;
  }
}

.placeholder(@rules){
  &::-webkit-input-placeholder {@rules();}
  &:-moz-placeholder           {@rules();}
  &::-moz-placeholder          {@rules();}
  &:-ms-input-placeholder      {@rules();}
  &::placeholder               {@rules();}
}

.fz(@font-size, @line-height:1){
  @rem-font-size: (@font-size / 10);
  font-size: ~"@{font-size}px";
  // font-size: ~"@{rem-font-size}rem";
  line-height: @line-height;
}

.font(@font-size; @line-height){
  @rem-font-size: (@font-size / 10);
  @rem-line-height: (@line-height / 10);
  font-size: ~"@{font-size}px";
  // font-size: ~"@{rem-font-size}rem";
  line-height: ~"@{line-height}px";
  // line-height: ~"@{rem-line-height}rem";
}

.font-face(@fn, @ff, @ffn, @fw, @fs){
  @font-face {
    font-family: @fn;
    src: url("fonts/@{ff}/@{ffn}.eot");
    src: url("fonts/@{ff}/@{ffn}.eot?#iefix") format('embedded-opentype'),
         url("fonts/@{ff}/@{ffn}.woff") format('woff'),
         url("fonts/@{ff}/@{ffn}.ttf") format('truetype');
    font-weight: @fw;
    font-style: @fs;
  }
}

.arrow(@w, @h, @background, @direction) when (@direction = top) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: 0 (@width / 2) @height (@width / 2);
  border-color: transparent transparent @background transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = right) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: (@height / 2) 0 (@height / 2) @width;
  border-color: transparent transparent transparent @background;
}
.arrow(@w, @h, @background, @direction) when (@direction = bottom) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: @height (@width / 2) 0 (@width / 2);
  border-color: @background transparent transparent transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = left) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: (@height / 2) @width (@height / 2) 0;
  border-color: transparent @background transparent transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = top-left) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: @height @width 0 0;
  border-color: @background transparent transparent transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = top-right) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: 0 @width @height 0;
  border-color: transparent @background transparent transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = bottom-right) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: 0 0 @height @width;
  border-color: transparent transparent @background transparent;
}
.arrow(@w, @h, @background, @direction) when (@direction = bottom-left) {
  width: 0px;
  height: 0px;
  @width: unit(@w, px);
  @height: unit(@h, px);
  border-style: solid;
  border-width: @width 0 0 @height;
  border-color: transparent transparent transparent @background;
}

.opacity(@opacity) {
  opacity: @opacity / 100;
  .no-rgba & {
    filter: ~"alpha(opacity=@{opacity})";
  }
}

.rgba(@color, @opacity) {
    @rgba-color: rgba(red(@color), green(@color), blue(@color), @opacity);
    background-color: @rgba-color;
    .no-rgba & {
      background: none;
      filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d')", argb(@rgba-color),argb(@rgba-color)));
    }
}

.font-icons(@symbol) {
  content: ~'"\@{symbol}"';
  font-weight: normal;
  font-style: normal;
  font-family: @font-icons;
  speak: none;
  text-transform: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.center() {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
}

.tr(@prop, @time:.3s) {
  transition: @prop @time ease-out
}

.max(@med, @rules){
  @media (max-width: @med) {
    @rules();
  }
}

.min(@med, @rules){
  @media (min-width: @med) {
    @rules();
  }
}